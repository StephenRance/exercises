import {
  Button,
  Card,
  Error,
  Exercises,
  Filter,
  Filters,
  Header,
  Main,
} from '@/components';
import { BodyArea as FilterProps, Exercise as ExerciseProps } from '@/types';
import {
  filterExercises,
  getExercises,
  getFilters,
  replaceImages,
} from '@/utils';
import Head from 'next/head';
import { useEffect, useState } from 'react';

type Props = {
  exercises: ExerciseProps[];
  filters: FilterProps[];
};

const Home = ({ exercises, filters }: Props) => {
  const [appliedFilters, setAppliedFilters] = useState<FilterProps[]>([]);
  const [firstRender, setFirstRender] = useState(true);
  const [results, setResults] = useState<ExerciseProps[]>(exercises);

  const noResults = !results.length;
  const noFilters = !filters.length;

  const errorEnabled = noFilters || !exercises.length;
  const resetDisabled = exercises.length === results.length || noFilters;

  const toggleFilters = async (query: FilterProps) => {
    if (appliedFilters && appliedFilters.includes(query)) {
      return setAppliedFilters(appliedFilters.filter((item) => item !== query));
    }

    return setAppliedFilters([...appliedFilters, query]);
  };

  useEffect(() => {
    if (firstRender) {
      return setFirstRender(false);
    }

    setResults(filterExercises(appliedFilters, exercises));
  }, [appliedFilters]);

  return (
    <>
      <Head>
        <title>Exercises! by Stephen Rance</title>

        <meta content="Generated by create next app" name="description" />
        <meta content="width=device-width, initial-scale=1" name="viewport" />

        <link href="/favicon.png" rel="icon" />
        <link
          as="font"
          crossOrigin="anonymous"
          href="/fonts/roboto-regular.woff2"
          rel="preload"
          type="font/woff2"
        />
      </Head>

      <Header />

      <Main>
        <Filters aria-label="Exercise filters" role="listbox">
          {!errorEnabled &&
            filters.map((filter, i) => {
              const isActive = appliedFilters.includes(filter);

              return (
                <Filter key={i}>
                  <Button
                    aria-label={`Select the ${filter} filter`}
                    aria-selected={isActive}
                    isActive={isActive}
                    label={filter}
                    onClick={() => toggleFilters(filter)}
                    role="option"
                    type="button"
                  />
                </Filter>
              );
            })}

          {errorEnabled && (
            <Filter>
              <Button
                aria-label="Reload the current page and try again"
                label="Reload"
                onClick={() => window.location.reload()}
                theme="error"
                type="button"
              />
            </Filter>
          )}

          <Filter>
            <Button
              aria-label="Reset the filters you currently have selected"
              disabled={resetDisabled}
              label="Reset"
              onClick={() => setAppliedFilters([])}
              theme="secondary"
              type="button"
            />
          </Filter>
        </Filters>

        <Exercises>
          {noResults && <Error role="alert" />}

          {!noResults &&
            results.map((result, i) => (
              <Card
                key={i}
                female={result.female.image}
                male={result.male.image}
                name={result.name}
              />
            ))}
        </Exercises>
      </Main>
    </>
  );
};

export const getServerSideProps = async () => {
  let exercises = await getExercises();
  exercises = await replaceImages(exercises);

  const filters = await getFilters(exercises);

  return {
    props: {
      exercises,
      filters,
    },
  };
};

export default Home;
